# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique # read-only (managed by Graphcool)
  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  # email-password template
  email: String! @isUnique
  password: String!
  # custom
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  organizations: [Organization!]! @relation(name: "UsersInOrganizations")
  contactInformation: [ContactInformation!]! @relation(name: "UserContactInformation")
  # Uncomment below - you can declare relations between models like this
  # posts: [Post!]! @relation(name: "UserPosts")
}

type Organization @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  # custom
  name: String!
  users: [User!]! @relation(name: "UsersInOrganizations")
}

type Commodity implements Notes @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  # custom
  name: String!
  type: CommodityType! @defaultValue(value: "GOODS")
  vendorCode: String
  barCode: String
  notes: String
  clientOrder: ClientOrder @relation(name: "ClientOrderCommodities")
}

enum CommodityType {
  GOODS
  SERVICE
}

interface Notes {
  notes: String
}

type Partner implements Notes @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  # custom
  name: String!
  legalName: String
  notes: String
  contactInformation: [ContactInformation!]! @relation(name: "PartnerContactInformation")
  clientOrders: [ClientOrder!]! @relation(name: "ClientOrderPartner")
}

type ContactInformation @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  # custom
  type: ContactInformationType!
  value: String!
  partner: Partner @relation(name: "PartnerContactInformation")
  user: User @relation(name: "UserContactInformation")
  clientOrder: ClientOrder @relation(name: "ClientOrderDeliveryAddress")
}

enum ContactInformationType {
  PHONE_NUMBER
  EMAIL
  ADDRESS
}

type ClientOrder implements Notes @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  # custom
  orderNumber: Int!
  date: DateTime!
  client: Partner! @relation(name: "ClientOrderPartner")
  notes: String
  deliveryAddress: ContactInformation @relation(name: "ClientOrderDeliveryAddress")
  products: [Commodity!]! @relation(name: "ClientOrderCommodities")
}

# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }
